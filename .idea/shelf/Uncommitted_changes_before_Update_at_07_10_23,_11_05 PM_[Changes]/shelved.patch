Index: app/src/main/java/com/luna/marvel/app/ui/navigation/utils/navComposable.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/luna/marvel/app/ui/navigation/utils/navComposable.kt b/app/src/main/java/com/luna/marvel/app/ui/navigation/utils/NavExtensions.kt
rename from app/src/main/java/com/luna/marvel/app/ui/navigation/utils/navComposable.kt
rename to app/src/main/java/com/luna/marvel/app/ui/navigation/utils/NavExtensions.kt
--- a/app/src/main/java/com/luna/marvel/app/ui/navigation/utils/navComposable.kt	(revision 7b8c1a182a9944347f43da2caca0e0ac640aebe8)
+++ b/app/src/main/java/com/luna/marvel/app/ui/navigation/utils/NavExtensions.kt	(date 1696741507738)
@@ -4,15 +4,35 @@
 import androidx.compose.animation.EnterTransition
 import androidx.compose.animation.ExitTransition
 import androidx.compose.runtime.Composable
-import androidx.compose.ui.window.DialogProperties
 import androidx.navigation.NamedNavArgument
 import androidx.navigation.NavBackStackEntry
 import androidx.navigation.NavGraphBuilder
+import androidx.navigation.NavHostController
+import androidx.navigation.NavOptionsBuilder
 import androidx.navigation.compose.composable
-import androidx.navigation.compose.dialog
 import androidx.navigation.navArgument
 import com.luna.marvel.app.ui.navigation.graphs.Destination
 
+fun NavHostController.navigateTo(
+    destination: Destination,
+    args: List<Any> = emptyList(),
+    navOptionsBuilder: NavOptionsBuilder.() -> Unit = {
+        popUpTo(destination.route) {
+            inclusive = false
+        }
+        launchSingleTop = true
+    }
+) {
+    navigate(
+        route = destination.createRoute(args),
+        builder = { navOptionsBuilder() }
+    )
+}
+
+private fun Destination.createRoute(args: List<Any>): String = listOf(route)
+    .plus(args)
+    .joinToString("/")
+
 fun NavGraphBuilder.navComposable(
     destination: Destination,
     enterTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition? = { null },
@@ -28,19 +48,6 @@
     popEnterTransition = popEnterTransition,
     popExitTransition = popExitTransition
 ) { content(it) }
-
-fun NavGraphBuilder.dialogComposable(
-    destination: Destination,
-    content: @Composable (NavBackStackEntry) -> Unit,
-) = dialog(
-    route = destination.getRoute(),
-    arguments = destination.setArgs(),
-    dialogProperties = DialogProperties(
-        dismissOnBackPress = true,
-        dismissOnClickOutside = true,
-        decorFitsSystemWindows = true
-    )
-) { content(it) }
 
 private fun Destination.getRoute(): String {
     return listOf(route)
Index: app/src/main/java/com/luna/marvel/app/ui/navigation/utils/navigateTo.kt
===================================================================
diff --git a/app/src/main/java/com/luna/marvel/app/ui/navigation/utils/navigateTo.kt b/app/src/main/java/com/luna/marvel/app/ui/navigation/utils/navigateTo.kt
deleted file mode 100644
--- a/app/src/main/java/com/luna/marvel/app/ui/navigation/utils/navigateTo.kt	(revision 7b8c1a182a9944347f43da2caca0e0ac640aebe8)
+++ /dev/null	(revision 7b8c1a182a9944347f43da2caca0e0ac640aebe8)
@@ -1,25 +0,0 @@
-package com.luna.marvel.app.ui.navigation.utils
-
-import androidx.navigation.NavHostController
-import androidx.navigation.NavOptionsBuilder
-import com.luna.marvel.app.ui.navigation.graphs.Destination
-
-fun NavHostController.navigateTo(
-    destination: Destination,
-    args: List<Any> = emptyList(),
-    navOptionsBuilder: NavOptionsBuilder.() -> Unit = {
-        popUpTo(destination.route) {
-            inclusive = false
-        }
-        launchSingleTop = true
-    }
-) {
-    navigate(
-        route = destination.createRoute(args),
-        builder = { navOptionsBuilder() }
-    )
-}
-
-private fun Destination.createRoute(args: List<Any>): String = listOf(route)
-    .plus(args)
-    .joinToString("/")
\ No newline at end of file
Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\nagp = \"8.3.0-alpha05\"\nkotlin = \"1.9.0\"\n#kotlin coroutines\nkotlin-coroutines = \"1.7.3\"\n#noinspection GradleDependency\ncore-ktx = \"1.10.1\"\nlifecycle-runtime-ktx = \"2.6.1\"\nactivity-compose = \"1.7.2\"\n#noinspection GradleDependency\ncompose-bom = \"2023.03.00\"\ncompose-navigation = \"2.7.1\"\ncompose-constraint-layout = \"1.0.1\"\ncompose-material-3 = \"1.1.1\"\nretrofit = \"2.9.0\"\nokhttp = \"4.11.0\"\nroom = \"2.5.2\"\nhilt = \"2.47\"\nhilt-nav-compose = \"1.0.0\"\narrow = \"1.2.0\"\n#testing\njunit = \"4.13.2\"\nmockito-kotlin = \"5.1.0\"\nmockito-inline = \"5.2.0\"\nturbine = \"1.0.0\"\ntruth = \"1.1.5\"\nandroidx-test = \"1.5.2\"\n\nokhttp3 = \"4.11.0\"\njavax-inject = \"1\"\n#coil\ncoil-compose = \"2.4.0\"\n\n[libraries]\ncore-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"core-ktx\" }\nlifecycle-runtime-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-runtime-ktx\", version.ref = \"lifecycle-runtime-ktx\" }\n#kotlin coroutines\nkotlin-coroutines-core = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-core\", version.ref = \"kotlin-coroutines\" }\n#javax inject\njavax-inject = { module = \"javax.inject:javax.inject\", version.ref = \"javax-inject\" }\nactivity-compose = { group = \"androidx.activity\", name = \"activity-compose\", version.ref = \"activity-compose\" }\n\ncompose-bom = { group = \"androidx.compose\", name = \"compose-bom\", version.ref = \"compose-bom\" }\nui = { group = \"androidx.compose.ui\", name = \"ui\" }\nui-graphics = { group = \"androidx.compose.ui\", name = \"ui-graphics\" }\nui-tooling = { group = \"androidx.compose.ui\", name = \"ui-tooling\" }\nui-tooling-preview = { group = \"androidx.compose.ui\", name = \"ui-tooling-preview\" }\nmaterial3 = { group = \"androidx.compose.material3\", name = \"material3\", version.ref = \"compose-material-3\" }\ncompose-navigation = { group = \"androidx.navigation\", name = \"navigation-compose\", version.ref = \"compose-navigation\" }\nconstraint-layout = { group = \"androidx.constraintlayout\", name = \"constraintlayout-compose\", version.ref = \"compose-constraint-layout\" }\ncoil-compose = { group = \"io.coil-kt\", name = \"coil-compose\", version.ref = \"coil-compose\" }\n#retrofit\nretrofit = { module = \"com.squareup.retrofit2:retrofit\", version.ref = \"retrofit\" }\nretrofit-gson = { module = \"com.squareup.retrofit2:converter-gson\", version.ref = \"retrofit\" }\n#okhttp\nokhttp-client = { module = \"com.squareup.okhttp3:okhttp\", version.ref = \"okhttp\" }\nokhttp-logging-interceptor = { module = \"com.squareup.okhttp3:logging-interceptor\", version.ref = \"okhttp\" }\n#room\nroom-runtime = { module = \"androidx.room:room-runtime\", version.ref = \"room\" }\nroom-ktx = { module = \"androidx.room:room-ktx\", version.ref = \"room\" }\nroom-compiler = { module = \"androidx.room:room-compiler\", version.ref = \"room\" }\n#hilt\nhilt-android = { module = \"com.google.dagger:hilt-android\", version.ref = \"hilt\" }\nhilt-compiler = { module = \"com.google.dagger:hilt-android-compiler\", version.ref = \"hilt\" }\nhilt-nav-compose = { module = \"androidx.hilt:hilt-navigation-compose\", version.ref = \"hilt-nav-compose\" }\narrow-core = { module = \"io.arrow-kt:arrow-core\", version.ref = \"arrow\" }\n\n#testing\njunit = { module = \"junit:junit\", version.ref = \"junit\" }\ncoroutines-test = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-test\", version.ref = \"kotlin-coroutines\" }\nmockito-kotlin = { module = \"org.mockito.kotlin:mockito-kotlin\", version.ref = \"mockito-kotlin\" }\nmockito-inline = { module = \"org.mockito:mockito-inline\", version.ref = \"mockito-inline\" }\ntruth = { module = \"com.google.truth:truth\", version.ref = \"truth\" }\nturbine = { module = \"app.cash.turbine:turbine\", version.ref = \"turbine\" }\n\n##COMPOSE TESTING\nui-test-manifest = { group = \"androidx.compose.ui\", name = \"ui-test-manifest\" }\nui-test-junit4 = { group = \"androidx.compose.ui\", name = \"ui-test-junit4\" }\nhilt-test = { module = \"com.google.dagger:hilt-android-testing\", version.ref = \"hilt\" }\nmock-web-server = { module = \"com.squareup.okhttp3:mockwebserver\", version.ref = \"okhttp3\" }\nnavigation-testing = { module = \"androidx.navigation:navigation-testing\", version.ref = \"compose-navigation\" }\nrunner = { module = \"androidx.test:runner\", version.ref = \"androidx-test\" }\n#rules = { module = \"androidx.test:rules\", version.ref = \"androidx-test-rules\" }\n\n[plugins]\ncom-android-application = { id = \"com.android.application\", version.ref = \"agp\" }\nkotlin-plugin = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\nkotlin-kapt = { id = \"org.jetbrains.kotlin.kapt\", version.ref = \"kotlin\" }\nhilt-gradle = { id = \"com.google.dagger.hilt.android\", version.ref = \"hilt\" }\nkotlin-jvm-gradle = { id = \"org.jetbrains.kotlin.jvm\", version.ref = \"kotlin\" }\n#android-library = { id = \"com.android.library\", version.ref = \"agp\" }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
--- a/gradle/libs.versions.toml	(revision 7b8c1a182a9944347f43da2caca0e0ac640aebe8)
+++ b/gradle/libs.versions.toml	(date 1696739981121)
@@ -1,5 +1,5 @@
 [versions]
-agp = "8.3.0-alpha05"
+agp = "8.3.0-alpha07"
 kotlin = "1.9.0"
 #kotlin coroutines
 kotlin-coroutines = "1.7.3"
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Fri Aug 11 16:04:27 CST 2023\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-8.3-rc-2-bin.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	(revision 7b8c1a182a9944347f43da2caca0e0ac640aebe8)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1696739981124)
@@ -1,6 +1,6 @@
 #Fri Aug 11 16:04:27 CST 2023
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.3-rc-2-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-rc-2-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
Index: data/src/test/java/com/luna/data/repositories/CharactersRepositoryUnitTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.luna.data.repositories\n\nimport arrow.core.Either\nimport com.google.common.truth.Truth\nimport com.luna.data.sources.CharactersDataSource\nimport com.luna.testshared.fakeCharacters\nimport com.luna.testshared.fakeComics\nimport com.luna.testshared.fakeError\nimport com.luna.testshared.fakeEvents\nimport com.luna.testshared.fakeMarvelItems\nimport com.luna.testshared.fakeSeries\nimport com.luna.testshared.fakeStories\nimport com.luna.testshared.fakeUnknownError\nimport kotlinx.coroutines.test.runTest\nimport org.junit.Assert.*\nimport org.junit.Before\nimport org.junit.Test\nimport org.junit.runner.RunWith\nimport org.mockito.Mock\nimport org.mockito.junit.MockitoJUnitRunner\nimport org.mockito.kotlin.whenever\n\n@RunWith(MockitoJUnitRunner::class)\nclass CharactersRepositoryUnitTest {\n\n    @Mock\n    lateinit var remote: CharactersDataSource\n\n    private lateinit var repository: CharactersRepository\n\n    @Before\n    fun setUp() {\n        repository = CharactersRepository(remote)\n    }\n\n    @Test\n    fun `getCharacters should return a list of characters on the right side of either result`() =\n        runTest {\n            val expected = Either.Right(fakeMarvelItems)\n            whenever(remote.getCharacters()).thenReturn(expected)\n\n            val actual = repository.getCharacters()\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n\n    @Test\n    fun `getCharacters should return an AppError on the left side of either result`() =\n        runTest {\n            val expected = Either.Left(fakeError)\n            whenever(remote.getCharacters()).thenReturn(Either.Left(fakeError))\n\n            val actual = repository.getCharacters()\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n\n    @Test\n    fun `getCharacterById should return a list of characters on the right side of either result`() =\n        runTest {\n            val expected = Either.Right(fakeCharacters)\n            whenever(remote.getCharacterById(1)).thenReturn(Either.Right(fakeCharacters))\n\n            val actual = repository.getCharacterById(1)\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n\n    @Test\n    fun `getCharacterById should return an AppError on the left side of either result`() =\n        runTest {\n            val expected = Either.Left(fakeError)\n            whenever(remote.getCharacterById(1)).thenReturn(Either.Left(fakeError))\n\n            val actual = repository.getCharacterById(1)\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n\n    @Test\n    fun `getCharacterComicsById should return a list of characters on the right side of either result`() =\n        runTest {\n            val expected = Either.Right(fakeComics)\n            whenever(remote.getCharacterComicsById(1)).thenReturn(expected)\n\n            val actual = repository.getCharacterComicsById(1)\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n\n    @Test\n    fun `getCharacterComicsById should return an AppError on the left side of either result`() =\n        runTest {\n            val expected = Either.Left(fakeError)\n            whenever(remote.getCharacterComicsById(1)).thenReturn(Either.Left(fakeError))\n\n            val actual = repository.getCharacterComicsById(1)\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n\n    @Test\n    fun `getCharacterEventsById should return a list of characters on the right side of either result`() =\n        runTest {\n            val expected = Either.Right(fakeEvents)\n            whenever(remote.getCharacterEventsById(1)).thenReturn(expected)\n\n            val actual = repository.getCharacterEventsById(1)\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n\n    @Test\n    fun `getCharacterEventsById should return an AppError on the left side of either result`() =\n        runTest {\n            val expected = Either.Left(fakeError)\n            whenever(remote.getCharacterEventsById(1)).thenReturn(Either.Left(fakeError))\n\n            val actual = repository.getCharacterEventsById(1)\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n\n    @Test\n    fun `getCharacterSeriesById should return a list of characters on the right side of either result`() =\n        runTest {\n            val expected = Either.Right(fakeSeries)\n            whenever(remote.getCharacterSeriesById(1)).thenReturn(expected)\n\n            val actual = repository.getCharacterSeriesById(1)\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n\n    @Test\n    fun `getCharacterSeriesById should return an AppError on the left side of either result`() =\n        runTest {\n            val expected = Either.Left(fakeError)\n            whenever(remote.getCharacterSeriesById(1)).thenReturn(Either.Left(fakeError))\n\n            val actual = repository.getCharacterSeriesById(1)\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n\n    @Test\n    fun `getCharacterStoriesById should return a list of characters on the right side of either result`() =\n        runTest {\n            val expected = Either.Right(fakeStories)\n            whenever(remote.getCharacterStoriesById(1)).thenReturn(expected)\n\n            val actual = repository.getCharacterStoriesById(1)\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n\n    @Test\n    fun `getCharacterStoriesById should return an AppError on the left side of either result`() =\n        runTest {\n            val expected = Either.Left(fakeUnknownError)\n            whenever(remote.getCharacterStoriesById(1)).thenReturn(Either.Left(fakeUnknownError))\n\n            val actual = repository.getCharacterStoriesById(1)\n\n            Truth.assertThat(actual).isEqualTo(expected)\n        }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/src/test/java/com/luna/data/repositories/CharactersRepositoryUnitTest.kt b/data/src/test/java/com/luna/data/repositories/CharactersRepositoryUnitTest.kt
--- a/data/src/test/java/com/luna/data/repositories/CharactersRepositoryUnitTest.kt	(revision 7b8c1a182a9944347f43da2caca0e0ac640aebe8)
+++ b/data/src/test/java/com/luna/data/repositories/CharactersRepositoryUnitTest.kt	(date 1696741030538)
@@ -12,7 +12,7 @@
 import com.luna.testshared.fakeStories
 import com.luna.testshared.fakeUnknownError
 import kotlinx.coroutines.test.runTest
-import org.junit.Assert.*
+import org.junit.Assert.assertEquals
 import org.junit.Before
 import org.junit.Test
 import org.junit.runner.RunWith
@@ -34,7 +34,7 @@
     }
 
     @Test
-    fun `getCharacters should return a list of characters on the right side of either result`() =
+    fun `given repository event when getCharacters is called then should return a list of characters on the right side of either result`() =
         runTest {
             val expected = Either.Right(fakeMarvelItems)
             whenever(remote.getCharacters()).thenReturn(expected)
